/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as RegisterRouteImport } from './routes/register/route'
import { Route as IndexRouteImport } from './routes/index/route'
import { Route as AuthenticatedStatisticsRouteImport } from './routes/_authenticated/statistics/route'
import { Route as AuthenticatedSettingsRouteImport } from './routes/_authenticated/settings/route'
import { Route as AuthenticatedHomeRouteImport } from './routes/_authenticated/home/route'
import { Route as AuthenticatedAddRouteImport } from './routes/_authenticated/add/route'

// Create/Update Routes

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRouteRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const IndexRouteRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedStatisticsRouteRoute =
  AuthenticatedStatisticsRouteImport.update({
    id: '/statistics',
    path: '/statistics',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedSettingsRouteRoute = AuthenticatedSettingsRouteImport.update(
  {
    id: '/settings',
    path: '/settings',
    getParentRoute: () => AuthenticatedRoute,
  } as any,
)

const AuthenticatedHomeRouteRoute = AuthenticatedHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedAddRouteRoute = AuthenticatedAddRouteImport.update({
  id: '/add',
  path: '/add',
  getParentRoute: () => AuthenticatedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/add': {
      id: '/_authenticated/add'
      path: '/add'
      fullPath: '/add'
      preLoaderRoute: typeof AuthenticatedAddRouteImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/home': {
      id: '/_authenticated/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof AuthenticatedHomeRouteImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/settings': {
      id: '/_authenticated/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthenticatedSettingsRouteImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/statistics': {
      id: '/_authenticated/statistics'
      path: '/statistics'
      fullPath: '/statistics'
      preLoaderRoute: typeof AuthenticatedStatisticsRouteImport
      parentRoute: typeof AuthenticatedImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedRouteChildren {
  AuthenticatedAddRouteRoute: typeof AuthenticatedAddRouteRoute
  AuthenticatedHomeRouteRoute: typeof AuthenticatedHomeRouteRoute
  AuthenticatedSettingsRouteRoute: typeof AuthenticatedSettingsRouteRoute
  AuthenticatedStatisticsRouteRoute: typeof AuthenticatedStatisticsRouteRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedAddRouteRoute: AuthenticatedAddRouteRoute,
  AuthenticatedHomeRouteRoute: AuthenticatedHomeRouteRoute,
  AuthenticatedSettingsRouteRoute: AuthenticatedSettingsRouteRoute,
  AuthenticatedStatisticsRouteRoute: AuthenticatedStatisticsRouteRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRouteRoute
  '/register': typeof RegisterRouteRoute
  '': typeof AuthenticatedRouteWithChildren
  '/add': typeof AuthenticatedAddRouteRoute
  '/home': typeof AuthenticatedHomeRouteRoute
  '/settings': typeof AuthenticatedSettingsRouteRoute
  '/statistics': typeof AuthenticatedStatisticsRouteRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRouteRoute
  '/register': typeof RegisterRouteRoute
  '': typeof AuthenticatedRouteWithChildren
  '/add': typeof AuthenticatedAddRouteRoute
  '/home': typeof AuthenticatedHomeRouteRoute
  '/settings': typeof AuthenticatedSettingsRouteRoute
  '/statistics': typeof AuthenticatedStatisticsRouteRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRouteRoute
  '/register': typeof RegisterRouteRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_authenticated/add': typeof AuthenticatedAddRouteRoute
  '/_authenticated/home': typeof AuthenticatedHomeRouteRoute
  '/_authenticated/settings': typeof AuthenticatedSettingsRouteRoute
  '/_authenticated/statistics': typeof AuthenticatedStatisticsRouteRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/register'
    | ''
    | '/add'
    | '/home'
    | '/settings'
    | '/statistics'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/register' | '' | '/add' | '/home' | '/settings' | '/statistics'
  id:
    | '__root__'
    | '/'
    | '/register'
    | '/_authenticated'
    | '/_authenticated/add'
    | '/_authenticated/home'
    | '/_authenticated/settings'
    | '/_authenticated/statistics'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRouteRoute: typeof IndexRouteRoute
  RegisterRouteRoute: typeof RegisterRouteRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRouteRoute: IndexRouteRoute,
  RegisterRouteRoute: RegisterRouteRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/register",
        "/_authenticated"
      ]
    },
    "/": {
      "filePath": "index/route.tsx"
    },
    "/register": {
      "filePath": "register/route.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/add",
        "/_authenticated/home",
        "/_authenticated/settings",
        "/_authenticated/statistics"
      ]
    },
    "/_authenticated/add": {
      "filePath": "_authenticated/add/route.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/home": {
      "filePath": "_authenticated/home/route.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/settings": {
      "filePath": "_authenticated/settings/route.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/statistics": {
      "filePath": "_authenticated/statistics/route.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
